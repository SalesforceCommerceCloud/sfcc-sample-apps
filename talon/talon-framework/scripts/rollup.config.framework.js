/* eslint-env node */
import * as fs from 'fs';
import replace from 'rollup-plugin-replace';
import lwc from '@lwc/rollup-plugin';
import resolve from 'rollup-plugin-node-resolve';
import commonjs from 'rollup-plugin-commonjs';
import resourceHash from './rollup-plugin-resource-hash';
import moduleAlias from 'rollup-plugin-alias';
import { terser } from 'rollup-plugin-terser';
import proxyCompat from 'rollup-plugin-compat';
import codeSize from './rollup-plugin-code-size';

import { getOutputConfigs } from 'talon-common';

const COMPAT_MODULES_ALIAS = {
    '@babel/runtime': 'TalonCompat.babel',
    'proxy-compat': 'Proxy'
};

const TALON_COMPAT_SRC = fs.readFileSync(`dist/compat.js`, 'utf8');

/**
 * Consider the compat helpers as external since they'll be included
 * as part of compat.js generated by rollup.config.compat.js.
 */
function external(id) {
    return !!Object.keys(COMPAT_MODULES_ALIAS).find(prefix => id.startsWith(`${prefix}/`));
}

/**
 * Map external compat helpers to the corresponding global variables.
 */
function globals(id) {
    for (const [prefix, alias] of Object.entries(COMPAT_MODULES_ALIAS)) {
        const [, name] = id.split(`${prefix}/`);
        if (name) {
            return `${alias}.${name.replace('/', '.')}`;
        }
    }
    return null;
}

/**
 * Include compat.js source when applicable
 */
function talonCompat() {
    return {
        renderChunk(code) {
            return TALON_COMPAT_SRC + code;
        }
    };
}

function getConfig({ mode, minify, target, env }) {
    const isCompat = target === 'es5';
    const plugins = [
        resourceHash({ mode, resourceDescriptor: 'framework://talon' }),
        lwc({ resolveFromPackages: false, exclude: ['/**/*.mjs'] }),
        moduleAlias({
            'lwc': require.resolve('@lwc/engine/dist/modules/es2017/engine.js'),
            'path-to-regexp': require.resolve('path-to-regexp') // this is needed to prevent duplication of path-to-regexp in talon.js
        }),
        replace({
            'process.env.NODE_ENV': JSON.stringify(env),
            'process.env.LWC_TARGET': JSON.stringify(target)
        }),
        resolve(),
        commonjs(),
        isCompat && proxyCompat({ polyfills: false }),
        isCompat && talonCompat(),
        minify && terser(),
        codeSize()
    ];

    return {
        input: 'src/index.js',
        external,
        output: {
            file: `talon.js (${mode})`,
            format: 'iife',
            name: 'Talon',
            globals
        },
        plugins
    };
}

const modes = process.env.MODE && process.env.MODE.split(',');

export default getOutputConfigs(modes).map(getConfig);
